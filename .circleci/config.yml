# Copyright Glen Knowles 2025.
# Distributed under the Boost Software License, Version 1.0.
#
# .circleci/config.yml

# See: https://circleci.com/docs/configuration-reference
version: 2.1

# Orchestrate jobs using workflows
# See: https://circleci.com/docs/workflows/ &
# https://circleci.com/docs/configuration-reference/#workflows
workflows:
  build:
    jobs:
      - build-win:
          image: windows-server-2019-vs2019:current
          generator: "Visual Studio 16 2019"
          matrix:
            parameters:
              platform: [Win32, x64]
              config: [Debug, Release]
              toolset: [v140, v141]
      - build-win:
          image: windows-server-2022-gui:current
          generator: "Visual Studio 17 2022"
          matrix:
            parameters:
              platform: [Win32, x64]
              config: [Debug, Release]
              toolset: [v142, v143]
      - build-dunix:
          env: CXX=g++ CC=gcc
          config: Debug
          matrix:
            parameters:
              image: [gcc:9, gcc:10, gcc:11, gcc:12]
      - build-unix:
          image: ubuntu-2004:current
          matrix:
            parameters:
              env:
                - CXX=g++-9 CC=gcc-9
                - CXX=g++-10 CC=gcc-10 INSTALL_APT=1
              config: [Debug, Release]
      - build-unix:
          image: ubuntu-2204:current
          matrix:
            parameters:
              env:
                - CXX=g++-11 CC=gcc-11
                - CXX=g++-12 CC=gcc-12 INSTALL_APT=1
              config: [Debug, Release]

jobs:
  build-win:
    parameters:
      image: {type: string}
      generator: {type: string}
      platform: {type: string}
      config: {type: string}
      toolset: {type: string}
    environment:
      p_generator: <<parameters.generator>>
      p_platform: <<parameters.platform>>
      p_config: <<parameters.config>>
      p_toolset: <<parameters.toolset>>

    # Specify the execution environment.
    # https://circleci.com/docs/configuration-reference/#executor-job
    machine:
      image: <<parameters.image>>
      resource_class: windows.medium
      shell: cmd.exe

    # Add steps to the job
    # See: https://circleci.com/docs/jobs-steps/#steps-overview &
    # https://circleci.com/docs/configuration-reference/#steps
    steps:
      # Checkout the code as the first step.
      - checkout
      - run:
          name: Build
          command: cd .circleci && build-win
      - run:
          name: Test
          command: cd bin && cli --test

  build-unix:
    parameters:
      image: {type: string}
      env: {type: string}
      config: {type: string}
    machine:
      image: <<parameters.image>>
      resource_class: medium
    steps:
      - checkout
      - run:
          name: Install
          command: |
            export <<parameters.env>>
            if [ -n "$INSTALL_APT" ]; then
              sudo apt-get update -y
              sudo apt-get install software-properties-common -y
              sudo add-apt-repository ppa:ubuntu-toolchain-r/test -y
              sudo apt-get update -y
              sudo apt-get install -y ${CC} ${CXX}
            fi
      - run:
          name: Build
          command: |
            export <<parameters.env>>
            mkdir -p build && cd build
            cmake .. -DBUILD_COVERAGE:BOOL=${BUILD_COVERAGE}
            cmake --build . --config <<parameters.config>>
      - run:
          name: Test
          command: |
            export <<parameters.env>>
            export LANG=en_US.UTF-8
            export COLUMNS=80
            cd bin
            ./cli --test

  build-dunix:
    parameters:
      image: {type: string}
      env: {type: string}
      config: {type: string}
    docker:
      - image: <<parameters.image>>
    resource_class: medium
    steps:
      - checkout
      - run:
          name: Install
          command: |
            export <<parameters.env>>
            apt-get update -y
            apt-get install cmake -y
      - run:
          name: Build
          command: |
            export <<parameters.env>>
            mkdir -p build && cd build
            cmake .. -DBUILD_COVERAGE:BOOL=${BUILD_COVERAGE}
            cmake --build . --config <<parameters.config>>
      - run:
          name: Test
          command: |
            export <<parameters.env>>
            locale -a
            #export LANG=en_US.UTF-8
            export COLUMNS=80
            cd bin
            ./cli --test
